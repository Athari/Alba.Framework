// <auto-generated />
#pragma warning disable
#nullable enable

using System.Numerics;
using Alba.Framework.Numerics;

namespace Alba.Framework.Avalonia.Markup.Converters;

[PublicAPI]
public class SByteComparisonConverter : IntegerComparisonConverter<SByte>
{
    public SByteComparisonConverter() { }
    public SByteComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public SByteComparisonConverter(NumberComparisonOperator @operator, SByte parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class Int16ComparisonConverter : IntegerComparisonConverter<Int16>
{
    public Int16ComparisonConverter() { }
    public Int16ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public Int16ComparisonConverter(NumberComparisonOperator @operator, Int16 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class Int32ComparisonConverter : IntegerComparisonConverter<Int32>
{
    public Int32ComparisonConverter() { }
    public Int32ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public Int32ComparisonConverter(NumberComparisonOperator @operator, Int32 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class Int64ComparisonConverter : IntegerComparisonConverter<Int64>
{
    public Int64ComparisonConverter() { }
    public Int64ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public Int64ComparisonConverter(NumberComparisonOperator @operator, Int64 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class Int128ComparisonConverter : IntegerComparisonConverter<Int128>
{
    public Int128ComparisonConverter() { }
    public Int128ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public Int128ComparisonConverter(NumberComparisonOperator @operator, Int128 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class IntPtrComparisonConverter : IntegerComparisonConverter<IntPtr>
{
    public IntPtrComparisonConverter() { }
    public IntPtrComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public IntPtrComparisonConverter(NumberComparisonOperator @operator, IntPtr parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class ByteComparisonConverter : IntegerComparisonConverter<Byte>
{
    public ByteComparisonConverter() { }
    public ByteComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public ByteComparisonConverter(NumberComparisonOperator @operator, Byte parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class UInt16ComparisonConverter : IntegerComparisonConverter<UInt16>
{
    public UInt16ComparisonConverter() { }
    public UInt16ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public UInt16ComparisonConverter(NumberComparisonOperator @operator, UInt16 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class UInt32ComparisonConverter : IntegerComparisonConverter<UInt32>
{
    public UInt32ComparisonConverter() { }
    public UInt32ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public UInt32ComparisonConverter(NumberComparisonOperator @operator, UInt32 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class UInt64ComparisonConverter : IntegerComparisonConverter<UInt64>
{
    public UInt64ComparisonConverter() { }
    public UInt64ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public UInt64ComparisonConverter(NumberComparisonOperator @operator, UInt64 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class UInt128ComparisonConverter : IntegerComparisonConverter<UInt128>
{
    public UInt128ComparisonConverter() { }
    public UInt128ComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public UInt128ComparisonConverter(NumberComparisonOperator @operator, UInt128 parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class UIntPtrComparisonConverter : IntegerComparisonConverter<UIntPtr>
{
    public UIntPtrComparisonConverter() { }
    public UIntPtrComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public UIntPtrComparisonConverter(NumberComparisonOperator @operator, UIntPtr parameter) : base(@operator, parameter) { }
}

[PublicAPI]
public class BigIntegerComparisonConverter : IntegerComparisonConverter<BigInteger>
{
    public BigIntegerComparisonConverter() { }
    public BigIntegerComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public BigIntegerComparisonConverter(NumberComparisonOperator @operator, BigInteger parameter) : base(@operator, parameter) { }
}

public class HalfComparisonConverter : FloatingComparisonConverter<Half, HalfEpsilonOperations>
{
    public HalfComparisonConverter() { }
    public HalfComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public HalfComparisonConverter(NumberComparisonOperator @operator, Half parameter) : base(@operator, parameter) { }
}

public class SingleComparisonConverter : FloatingComparisonConverter<Single, SingleEpsilonOperations>
{
    public SingleComparisonConverter() { }
    public SingleComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public SingleComparisonConverter(NumberComparisonOperator @operator, Single parameter) : base(@operator, parameter) { }
}

public class DoubleComparisonConverter : FloatingComparisonConverter<Double, DoubleEpsilonOperations>
{
    public DoubleComparisonConverter() { }
    public DoubleComparisonConverter(NumberComparisonOperator @operator) : base(@operator) { }
    public DoubleComparisonConverter(NumberComparisonOperator @operator, Double parameter) : base(@operator, parameter) { }
}
