<#@ template hostspecific="true" debug="true" #><#@ output extension="/" #>
<#@ assembly name="PresentationFramework" #>
<#@ import namespace="System.Windows" #>
<#@ include file="$(SolutionDir)\Alba.Framework.CodeGeneration\T4\Common.ttinclude" #>
<#
    var T4 = GetT4();
    foreach (string kind in new[]{ "Brush", "Color" })
        T4.GenerateFile(F("System{0}Extension.g.cs", kind), () => GenerateSystemColorsExtension(kind));
    T4.Process();
#>
<#+

    void GenerateSystemColorsExtension(string kind) {
        string kindKey = kind + "Key";
        var names = typeof(SystemColors).GetProperties()
            .Where(prop => prop.Name.EndsWith(kindKey))
            .Select(prop => prop.Name.Substring(0, prop.Name.Length - kindKey.Length))
            .ToArray();

#>
using System;
using System.Windows;

namespace <#=Namespace#>
{
    public class System<#=kind#>Extension : DynamicResourceExtension
    {
        public System<#=kind#>Extension (System<#=kind#>Key colorKey)
            : base(GetColorResourceKey(colorKey))
        {}

        private static object GetColorResourceKey (System<#=kind#>Key colorKey)
        {
            switch (colorKey) {
<#+           foreach (string name in names) { #>
                case System<#=kind#>Key.<#=name#>:
                    return SystemColors.<#=name#><#=kind#>Key;
<#+           } #>
                default:
                    throw new ArgumentException(string.Format("Unexpected colorKey value: {0}", colorKey));
            }
        }
    }

    public enum System<#=kind#>Key
    {
<#+   foreach (string name in names) { #>
        <#=name#>,
<#+   } #>
    }
}
<#+

    }
#>